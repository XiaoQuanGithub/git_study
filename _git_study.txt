明确一下，目前所有的版本控制管理系统，只能跟踪文本文件的改动，而例如图片、视频等二进制文件不能跟踪其内容的变化和改变，只知道大小的变化。

#最常用的步骤及命令
#前提是本地配好了ssh
#没建本地仓库，则新建一个
git init
#在建好的新仓库根目录下，想克隆一个远程仓库
git clone [url]
#或者在建好的新仓库根目录下，想配置一个远程仓库连接信息
git remote add [自定义名字] [远程仓库给的url]
#如git remote add origin git@github.com:XiaoQuanGithub/repository_study.git
#windows用户可以开了git-bash进入了本地仓库根目录
#先查看状态
git status
#假如有修改了文件，下面是把所有的文件添加进缓存区
git add .
#提交到本地仓库，注释不能为空
git commit -m "注释"
#推送到远程仓库，实现分布式同步
git push [自己给已经连接过的远程仓库的名字] master
#第一次推送给新的远程仓库，可以使用强制push的方法，会完全让本地仓库同步到远程仓库上，就是说假如在远程仓库新建时留下本地仓库没有的东西，会全部消失
#git push -u [自己给已经连接过的远程仓库的名字] master -f
#这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候

#配置
因为git是分布式版本控制系统，所以需要填写用户和邮箱作为一个标识
下面用了--global这个参数创建了全局的配置，表示本台机器的所有git仓库都能使用该配置
git config [--global] user.name "Mr.Q"
git config [--global] user.email "484526977@qq.com"
#显示当前的git配置
git config --list
#编辑git配置文件(在当前已经创建好的仓库目录下)
git config -e [--global]

#创建版本库（即创建本地仓库，英文名repository）
#在当前目录下新建一个git仓库
git init
#新建一个目录，将其初始化为git仓库
git init [project-name]
#下载一个项目和它的整个代码历史
git clone [url]

#增加/删除/修改文件
#查看状态
git status
#查看变更内容
git diff [file]
#添加指定文件到暂存区
git add [file1] [file2] ...
#添加指定目录到暂存区，包括子目录
git add [dir]
#添加当前目录的所有文件到暂存区
git add .
#添加每个变化前，都会要求确认
#对于同一个文件的多处变化，可以实现分次提交
git add -p
#删除工作区文件，并且将这次删除放入暂存区
git rm [file1] [file2] ...
#停止追终指定文件，但该文件会保留在工作区
git rm --cached [file]
#改名文件，并且将这个改名放入暂存区
git mv [file-original] [file-renamed]

#撤销
#撤销工作目录中所有未提交文件的修改内容
git reset --hard HEAD
#撤销指定的未提交文件的修改内容
git checkout HEAD <file>
#撤销指定的提交
git revert <commit>
#退回到之前1天的版本
git log --before="1 days"
#恢复暂存区的指定文件到工作区
git checkout [file]
#同样是恢复，加--是否必须，有待考究
git checkout -- [filename.后缀名]
#恢复某个commit的指定文件到暂存区和工作区
git checkout [commit] [file]
#恢复暂存区的所有文件到工作区
git checkout .
#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
git reset [file]
#重置暂存区与工作区，与上一次commit保持一致
git reset --hard
#重置当前分支的指针为指定commit,同时重置暂存区，但工作区不变
git reset [commit]
#重置当前分支的HEAD为指定commit,同时重置暂存区和工作区，与指定commit一致
git reset --hard [commit]
#重置当前HEDAD为指定commit,但保持暂存区和工作区不变
git reset --keep [commit]
#新建一个commit,用来撤销指定commit
#后者的所有变化都将被前者抵消，并且应用到当前分支
git revert [commit]
#暂时将未提交的变化移除，稍后再移入
git stash
git stash pop

#查看信息
#显示当前分支的版本历史
git log
#显示commit历史，以及每次commit发生变更的文件
git log --stat
#搜索提交历史，根据关键词
git log -S [keyword]
#显示某个commit之后的所有变动，每个commit占据一行
git log [tag] HEAD --grep feature
#显示某个文件的版本历史，包括文件改名
git log --follow [file]
git whatchanged [file]
#显示指定文件相关的每一次diff
git log -p [file]
#显示过去5次提交
git log -5 --pretty --oneline
#显示所有提交过的用户，按提交次数排序
git shortlog -sn
#显示指定文件是什么人在什么时间修改过
git blame [file]
#显示暂存区和工作区的差异
git diff
#显示暂存区和上一个commit的差异
git diff --cached [file]
#显示工作区与当前分支最新commit之间的差异
git diff HEAD
#显示两次提交之间的差异
git diff [first-branch]...[second-branch]
#显示今天你写了多少行代码
git diff --shortstat "@{0 day ago}"
#显示某次提交的元数据和内容变化
git show [commit]
#显示某次提交发生变化的文件
git show --name-only [commit]
#显示某次提交时，某个文件的内容
git show [commit]:[filename]
#显示当前分支的最近几次提交
git reflog

#代码提交
#提交暂存区到仓库
git commit -m [message]
#提交暂存区的指定文件到仓库区
git commit [file1] [file2] ... -m [message]
#提交工作区自上次commit之后的变化，直接到仓库区
git commit -a
#提交时显示所有diff信息
git commit -v
#使用一次新的commit,替代上一次提交
#如果代码没有任何新变化，则用来改写上一次commit的提交信息
git commit --amend -m [message]
#重做上一次commit，并包括指定文件的新变化
git commit --amend [file1] [file2] ...

每次准备提交前，先用git status看下，是不是都已暂存起来了，
然后再运行提交命令git commit;这种方式会启动文本编辑器以便输入本次提交的说明。
默认会启用shell的环境变量$EDITOR所指定的软件，一般都是vim或emacs。
当然也可以使用git config --global core.editor命令设定你喜欢的编辑软件。
编辑器会显示文本信息
默认的提交消息包含最后一次运行git status的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。
你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。
如果觉得这还不够，可以用 -v 选项将修改差异的每一行都包含到注释中来。
退出编辑器时，Git 会丢掉注释行，将说明内容和本次更新提交到仓库。
如果要输入解释的话就需要:
1.按键盘字母 i 进入insert模式
2.修改最上面那行黄色合并信息,可以不修改
3.按键盘左上角"Esc"
4.输入":wq",注意是冒号+wq,按回车键即可
也可以使用 -m 参数后跟提交说明的方式，在一行命令中提交更新。即：git commit -m "这里是信息"，添加就不会出现提示了

#分支
#显示所有本地分支
git branch
#列出所有远程分支
git branch -r
#列出所有本地分支和远程分支
git branch -a
#新建一个分支，但依然停留在当前分支
git branch [branch-name]
#新建一个分支，与指定的远程分支建立追踪关系
git branch --track [branch] [remote-branch]
#删除分支
git branch -d [branch-name]
#删除远程分支
git push origin --delete [branch-name]
git branch -dr [remote/branch]
#新建一个分支，并切换到该分支
git checkout -b [branch]
#切换到指定分支，并更新工作区
git checkout [branch-name]
#切换到上一个分支
git checkout -
#建立追踪关系，在现有分支与指定的远程分支之间
git branch --set-ustream [branch] [remote-branch]
#合并指定分支到当前分支
git merge [branch]
#衍合指定分支到当前分支
git rebase <branch>
#选择一个commit,合并进当前分支
git cherry-pick [commit]

#远程操作(remote遥远的)
#在连接远程仓库前，现在本地电脑配置ssh密钥文件
#ssh-keygen -t rsa -C "youremail@example.com"
#然后一路回车就可以生成
#文件在C:\Users\（自己电脑用户名）\.ssh里面，有公钥和私钥
#在本地仓库目录下开shell终端
#两种方式连接远程仓库
#origin是自己自定义的名字，用于给本地仓库配置多个远程仓库连接信息作识别名
#采用ssh连接方式
#git remote add origin git@github.com:XiaoQuanGithub/repository_study.git
#采用https连接方式
#git remote add origin https://github.com/XiaoQuanGithub/repository_study.git
#注意，origin是名字，你自己可以随便取
#第一次把本地仓库推送到远程空仓库时
git push -u origin master
#之后的本地master分支的最新修改推送到远程仓库
git push origin master
#当出现"error: failed to push some refs to ..."错误时
#大概原因就是本地和远程的文件应该合并后，两个库保持一致，才能上传本地的新文件
#解决步骤
#1、先拉下来，会自动合并的
#git pull origin master
#2、再上传
#git push -u origin master
#假如接着还出现"hint: Updates were rejected because the tip of your current branch is behind"
#意思为，提示：由于当前分支的提示落后，更新被拒绝
#解决思路
#1.使用强制push的方法
#git push -u origin master -f
#这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候
#2.若不想merge(合并)远程和本地修改，可以先创建新的分支
#git branch [name]
#然后push
#git push -u origin [name]

#增加一个新的远程仓库，并命名
git remote add [shortname] [url]
#显示所有远程仓库
git remote -v
#显示某个远程仓库的信息
git remote show [remote]
#下载远程仓库的所有变动
git fetch [remote]
#取回远程仓库的变化，并与本地分支合并
git pull [remote] [branch]
#上传本地指定分支到远程仓库
git push [remote] [branch]
#强行推送当前分支到远程仓库，即使有冲突
git push [remote] --force
#推送所有分支到远程仓库
git push [remote] --all
#删除远程分支或标签
git push <remote> :<branch/tag-name>
#上传所有标签
git push --tags

#修改本地仓库关于远程仓库配置的url信息
git remote [shortname] set-url [new-url]
#修改本地仓库关于远程仓库配置的信息，在config文件对应的地方修改
#未push之前更改提交的注释
#如果提交了代码到本地，还没push，发现同步时提交的变更内容的注释填写有误
#查看提交文件，里面包含注释和变更内容
git commit --amend
#按v进入编辑模式，更改完成后
#按esc,:qw! 保存

#标签
#列出所有本地标签
git tag
#基于最新提交创建标签
git tag <tagname>
#删除标签
git tag -d <tagname>
#删除远程tag
git push origin :refs/tags/[tagName]
#查看tag信息
git show [tag]
#提交指定tag
git push [remote] [tag]
#提交所有tag
git push [remote] --tags
#新建一个分支，指向某个tag
git checkout -b [branch] [tag]

#生成一个可供发布的压缩包
git archive
