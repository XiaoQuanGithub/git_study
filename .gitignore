#在使用Git的过程中，我们喜欢有的文件比如日志，临时文件，编译的中间文件等不要提交到代码仓库，这时就要设置相应的忽略规则，来忽略这些文件的提交。
#注意：如果你创建.gitignore文件之前就push了某一文件，那么即使你在.gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。
#解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:
#git rm -r --cached .
#
#规则 作用
#/mtk    过滤整个文件夹
#*.zip   过滤所有.zip文件
#/mtk/do.c   过滤某个具体文件
#!/mtk/one.txt   追踪（不过滤）某个具体文件
#
#配置语法
#注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的
#以斜杠“/”开头表示目录；
#以星号“*”通配多个字符；
#以问号“?”通配单个字符
#以方括号“[]”包含单个字符的匹配列表；
#以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。
#
#Git 忽略规则匹配语法
#空格不匹配任意文件，可作为分隔符，可用反斜杠转义
## 开头的模式标识注释，可以使用反斜杠进行转义
#! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义
#/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件
#/ 开始的模式匹配项目跟目录
#如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录
#**匹配多级目录，可在开始，中间，结束
#?通用匹配单个字符
#[]通用匹配单个字符列表
#
#常用匹配示例：
#bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
#/bin: 忽略根目录下的bin文件
#/*.c: 忽略 cat.c，不忽略 build/cat.c
#debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj
#**/foo: 忽略/foo, a/foo, a/b/foo等
#a/**/b: 忽略a/b, a/x/b, a/x/y/b等
#!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件
#*.log: 忽略所有 .log 文件
#config.php: 忽略当前路径的 config.php 文件
#
#有三种方法可以实现忽略Git中不想提交的文件。
#1.在Git项目中定义 .gitignore 文件。如上所述。
#2.在Git项目的设置中指定排除文件
#这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude 文件，然后将需要忽略提交的文件写入其中。
#这种方式指定的忽略文件的根目录是项目根目录。
#3.定义Git全局的 .gitignore 文件
#设置全局的 git .gitignore 文件来管理所有Git项目的行为。
#可以放在任意位置。
#git config --global core.excludesfile ~/.gitignore
#
#在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：
#从命令行中读取可用的忽略规则
#当前目录定义的规则
#父级目录定义的规则，依次地推
#$GIT_DIR/info/exclude 文件中定义的规则
#core.excludesfile中定义的全局规则